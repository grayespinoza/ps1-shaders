[remote.github]
owner = "grayespinoza"
repo  = "ps1-shaders"

[changelog]
header = """
# Changelog\n
"""
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% macro print_commit(commit) -%}
  - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
    {% if commit.breaking %}[**breaking**] {% endif %}\
    {{ commit.message | upper_first }} - \
    ([{{ commit.id | truncate(length=7, end="") }}]({{ self::remote_url() }}/commit/{{ commit.id }}))\
{% endmacro -%}

{% if version %}\
  {% if previous.version %}\
    ## [{{ version }}]\
      ({{ self::remote_url() }}/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
  {% else %}\
    ## {{ version }} - {{ timestamp | date(format="%Y-%m-%d") }}
  {% endif %}\
{% else %}\
  ## Unreleased
{% endif %}\

{% for group, commits in commits | group_by(attribute="group") %}
  ### {{ group | striptags | trim | upper_first }}
  {% for commit in commits
  | filter(attribute="scope")
  | sort(attribute="scope") %}
    {{ self::print_commit(commit=commit) }}
  {%- endfor %}
  {% for commit in commits %}
    {%- if not commit.scope -%}
      {{ self::print_commit(commit=commit) }}
    {% endif -%}
  {% endfor -%}
{% endfor -%}

{%- if github -%}
{% if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  ## New Contributors\
{% endif %}\
{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
  {% if contributor.username == "github-actions[bot]" or contributor.username == "dependabot[bot]" %}\
  {% else %}\
    - @**[{{ contributor.username }}](https://github.com/{{ contributor.username }})** made their first contribution \
    {%- if contributor.pr_number %} in
      [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }})
    {% endif %}\
  {%- endif %}\
{%- endfor -%}
{%- endif %}
"""
footer = """
\n
"""
trim = true

[git]
conventional_commits = true
filter_unconventional = true
require_conventional = true
split_commits = false
commit_parsers = [
  { message = "^feat", group = "<!-- A -->Features" },
  { message = "^fix", group = "<!-- B -->Bug Fixes" },
  { message = "^perf", group = "<!-- C -->Performance" },
  { message = "^refactor", group = "<!-- D -->Refactor" },
  { message = "^style", group = "<!-- E -->Styling" },
  { message = "^test", group = "<!-- F -->Testing" },
  { message = "^build", group = "<!-- G -->Build" },
  { message = "^docs: update Changelog", skip = true },
  { message = "^docs", group = "<!-- H -->Documentation" },
  { message = "^ci", group = "<!-- I -->Continuous Integration" },
  { message = "^cd", group = "<!-- J -->Continuous Delivery" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore", group = "<!-- K -->Miscellaneous Tasks" },
  { body = ".*security", group = "<!-- L -->Security" },
]
protect_breaking_commits = false
filter_commits = false
topo_order = false
sort_commits = "newest"
